# Initialized `handlers.py` generated by ipm.
# Regists your handlers here.
# Documents at https://ipm.hydroroll.team/

from infini.register import Register
from infini.router import Command
from infini.input import Input

from diceutils.utils import format_msg, get_group_id, get_user_id
from diceutils.parser import Positional, CommandParser, Commands, Bool, Optional
from diceutils.status import StatusPool
from diceutils.logging import Logger, MAX_LOGGERS_PER_SESSION
from diceutils.renderer import Renderer, Messages, Role
from diceutils.renderer.html import HTMLRenderer

register = Register()
status = StatusPool.register("dicergirl")
logger = Logger()


@register.handler(Command("log"), priority=0)
def log_handler(input: Input):
    args = format_msg(input.get_plain_text(), begin=".log", zh_en=True)
    commands = CommandParser(
        Commands(
            [
                Bool(("new", "add")),
                Bool(("clear")),
                Optional(("start", "on"), int),
                Optional(("stop", "off"), int),
                Optional(("export"), int),
                Bool(("remove", "rm")),
                Optional(("format", "fmt"), str),
                Positional("name", str),
            ]
        ),
        args=args,
        auto=True,
    ).results

    session_id = get_group_id(input)
    active_loggers: set = status.get(session_id, "active_loggers") or set()
    loggers: set = status.get(session_id, "loggers") or set()

    if commands["clear"]:
        status.set(session_id, "active_loggers", set())
        status.set(session_id, "loggers", set())
        for id in loggers:
            logger.clear(session_id, id)
        yield input.output("text", "log.clear", block=True)

    if commands["new"]:
        if len(loggers) >= MAX_LOGGERS_PER_SESSION:
            yield input.output(
                "text",
                "log.error.max",
                block=True,
                variables={"max": MAX_LOGGERS_PER_SESSION},
            )
        next_id = len(loggers)
        active_loggers.add(next_id)
        loggers.add(next_id)
        yield input.output("text", "log.new", variables={"sequence": next_id})
        status.set(session_id, "active_loggers", active_loggers)
        status.set(session_id, "loggers", loggers)
        return

    if isinstance(commands["start"], int):
        if commands["start"] not in loggers:
            yield input.output("text", "log.error.not_found", block=True)

        active_loggers.add(commands["start"])
        status.set(session_id, "active_loggers", active_loggers)
        yield input.output(
            "text", "log.start", block=True, variables={"sequence": commands["start"]}
        )

    if isinstance(commands["stop"], int):
        if commands["stop"] not in loggers:
            yield input.output("text", "log.error.not_found", block=True)
        elif commands["stop"] not in active_loggers:
            yield input.output("text", "log.error.not_started", block=True)

        active_loggers.remove(commands["stop"])
        status.set(session_id, "active_loggers", active_loggers)
        yield input.output(
            "text", "log.stop", block=True, variables={"sequence": commands["stop"]}
        )

    if isinstance(commands["export"], int):
        messages = Messages()
        for message in logger.load(session_id, commands["export"]):
            if message["user_role"] == "KP":
                role = Role.GM
            elif message["user_role"] == "PL":
                role = Role.PL
            elif message["user_role"] == "DICER":
                role = Role.DICER
            else:
                role = Role.OB
            messages.add_message(
                user_code=message["user_id"],
                role=role,
                nickname=message["card_name"],
                date=message["date"],
                content=message["data"],
            )
        filename = commands["name"] or f"{session_id}_{commands['export']}"
        filepath = Renderer.render(messages, HTMLRenderer()).export(filename)
        yield input.output(
            "text",
            "log.export",
            variables={"sequence": commands["export"], "filename": filename},
        )
        yield input.output(
            "workflow",
            "echo.upload",
            variables={
                "type": "file",
                "filepath": filepath,
            },
        )
        return

    yield input.output(
        "text",
        "log.info",
        block=True,
        variables={
            "count": len(loggers),
            "active_count": len(active_loggers),
        },
    )


@register.handler(Command("kp", alias=["gm"]))
def kp_handler(input: Input):
    user_id = get_user_id(input)
    session_id = get_group_id(input)

    status = StatusPool.get("dicergirl")

    kps = status.get(session_id, "kp") or []
    pls = status.get(session_id, "pl") or []
    obs = status.get(session_id, "ob") or []
    if user_id not in kps:
        kps.append(user_id)
        status.set(session_id, "kp", kps)
        if user_id in pls:
            pls.remove(user_id)
            status.set(session_id, "pl", pls)
        if user_id in obs:
            obs.remove(user_id)
            status.set(session_id, "ob", obs)
        return input.output("text", "role.kp", block=True)
    else:
        kps.remove(user_id)
        status.set(session_id, "kp", kps)
        return input.output("text", "role.kp.out", block=True)


@register.handler(Command("pl"))
def pl_handler(input: Input):
    user_id = get_user_id(input)
    session_id = get_group_id(input)

    status = StatusPool.get("dicergirl")

    kps = status.get(session_id, "kp") or []
    pls = status.get(session_id, "pl") or []
    obs = status.get(session_id, "ob") or []
    if user_id not in pls:
        pls.append(user_id)
        status.set(session_id, "pl", pls)
        if user_id in kps:
            kps.remove(user_id)
            status.set(session_id, "kp", kps)
        if user_id in obs:
            obs.remove(user_id)
            status.set(session_id, "ob", obs)
        return input.output("text", "role.pl", block=True)
    else:
        pls.remove(user_id)
        status.set(session_id, "pl", pls)
        return input.output("text", "role.pl.out", block=True)


@register.handler(Command("ob"))
def ob_handler(input: Input):
    user_id = get_user_id(input)
    session_id = get_group_id(input)

    status = StatusPool.get("dicergirl")

    kps = status.get(session_id, "kp") or []
    pls = status.get(session_id, "pl") or []
    obs = status.get(session_id, "ob") or []
    if user_id not in obs:
        obs.append(user_id)
        status.set(session_id, "ob", obs)
        if user_id in kps:
            kps.remove(user_id)
            status.set(session_id, "kp", kps)
        if user_id in pls:
            pls.remove(user_id)
            status.set(session_id, "pl", pls)
        return input.output("text", "role.ob", block=True)
    else:
        obs.remove(user_id)
        status.set(session_id, "ob", obs)
        return input.output("text", "role.ob.out", block=True)
